# -*- coding: utf-8 -*-
"""Nattapong Panthiya - Lab14_Dictionary.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NW3BtE60B7295gM_egx3pJYPMb2meHp-

## Dictionary

![alt text](https://images.unsplash.com/photo-1451226428352-cf66bf8a0317?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=67903a3d35fc9a4262b94cd0ebec8c12&auto=format&fit=crop&w=400&q=60)

เป็น data structure ที่มีประโยชน์มากๆในการทำ data analysis หลักการของ dictionary (เรียกสั้นๆว่า dict) คือ **key-value pair**

สมมติเรามีเพื่อนสามคน ชื่อ Joe, Andy, Mary แต่ละคนอายุ 28, 30, 25 ตามลำดับ

เราสามารถสร้าง dictionary ได้แบบนี้
"""

# construct dict
my_friends = {
    'Joe': 28,
    'Andy':30,
    'Mary':25
}

# print result
print(type(my_friends))
print(my_friends)

scores = {
    "student_a": [90, 100, 88, 74, 75],
    "student_b": [100, 50, 20, 30, "F"],
    "student_c": ["F", 29, 39, 88, 99]
}

print(scores)

"""# คุณสมบัติของ Dictionary
สมาชิก (item) ของ dictionary อยู่ในรูปแบบของ key:value มีคุณสมบัติ ดังนี้


*   **Ordered** สำหรับ Python version 3.7 ขึ้นไป dictionary มีคุณสมบัติ ordered หมายความว่าสมาชิกแต่ละตัวมีลำดับที่กำหนดไว้และลำดับนั้นจะไม่สามารถเปลี่ยนแปลงได้ (Python ที่เป็นเวอร์ชันก่อนหน้า 3.7 จะเป็น unordered คือ ไม่มีการกำหนดลำดับให้แต่ละสมาชิก)
*   **Changeable** เราสามารถเปลี่ยนแปลง เพิ่ม หรือลบสมาชิกหลังจากสร้าง dictionary แล้ว
*   **Duplicate not allowed** dictionary ต้องไม่มีสมาชิกที่มีคีย์ซ้ำกัน



"""

# dictionary ต้องมี key ไม่ซ้ำกัน แต่ แต่ละ key สามารถมี value เหมือนกันได้
my_dict = {
    "apple"  : 1,
    "banana" : 2,
    "orange" : 2,
}
print(my_dict)
print(my_dict.keys())
print(my_dict.values())

"""## เราสร้าง dict ด้วย { } หรือฟังชั่น dict()

template ในการสร้าง dictionary ของ Python

```
my_dict = {
        "key1": value,
        "key2": value,
        "key3": value
}
```

key1 - key3 ใน dictionary ห้ามซ้ำกันเลย (unique) ส่วนใหญ่เราใช้ string ตั้งชื่อ key ใน dict
"""

# tuple
my_friends_tuple = (('Joe', 28), ('Andy', 30), ('Mary', 25))

# เปลี่ยน tuple เป็น dictionary
my_friends_dict = dict(my_friends_tuple)
print(type(my_friends_dict))
print(my_friends_dict)

"""ในตัวอย่างด้านบน **key** คือ 'Andy'  'Joe' และ 'Mary'

ส่วน **value** คือ 28 30 25

## Extract Information from Dictionary

Dictionary ไม่เหมือนกับ List และ Tuple ตรงที่ Dict ไม่สามารถเข้าถึงข้อมูลสมาชิกโดยใช้ index ได้

ถ้าอยากจะดึงข้อมูลออกมาจาก Dict เราต้องใช้ key ในการดึง
"""

my_friends = {
    'Joe': 28,
    'Andy': 30,
    'Mary': 25
}

print(my_friends['Joe'])
print(my_friends['Mary'])
print(my_friends['Andy'])

# เราสามารถแก้ไขค่าต่างๆใน dictionary ได้
# dictionary เป็น mutable object (เหมือน list)
# แก้ไขอายุของ 'Joe' ให้เป็น 44 ปี

my_friends['Joe'] = 44
print(my_friends)

# เพิ่มเพื่อนคนใหม่ 'New Guy' อายุ 17 ปีเข้าไปใน dict
my_friends['New Guy'] = 17
print(my_friends)

'New Guy' in my_friends

"""## KEY-VALUE pair

เราสามารถใช้ for-loop ในการปริ้น key value ออกมาจาก dictionary ง่ายๆ
"""

# construct dict
my_friends = {
    'Joe': 28,
    'Andy': 30,
    'Mary': 25
}

# print keys
print(my_friends.keys())

# print values
print(my_friends.values())

# print simple text
print("These are my close friends")

# using for-loop to print key-value pair
for key,value in my_friends.items():
  print("Name: " + key + ", Age: " + str(value))

x = {
    "A": 30, "B": 25, "C": 29
}

print(x)

for k, v in x.items():
  print("key: " + k + " " + "value: " + str(v))

"""# ตัวอย่าง Method ของ Dictionary

*   **update()** ใช้เพิ่มสมาชิกใหม่เข้้าไปใน dictionary

```
# ตัวอย่างการเพิ่ม item เข้าไปใน dictionary ด้วย update()
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.update({"color": "red"})
```
*   **pop()** ใช้ลบสมาชิกตาม key ที่ระบุ

```
# ตัวอย่างการลบ item ด้วย pop()
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.pop("model")
print(thisdict)
```

*   **popitem()** ใช้ลบสมาชิกตัวสุดท้ายที่ถูกใส่เข้ามาใน dictionary

```
# ตัวอย่างการใช้ popitem()
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.popitem()
print(thisdict)
```

*  **clear()** ใช้สำหรับลบสมาชิกทุกตัวออกจาก dictionary


```
# ตัวอย่างการลบทุกสมาชิกออกจาก dictionary ด้วย clear()
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.clear()
print(thisdict)

```

อยากเรียนรู้ method ของ dictionary เพิ่มเติมให้ไป[ที่นี่](https://www.w3schools.com/python/python_dictionaries_methods.asp)









"""

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print("thisdict = ",thisdict)
thisdict.update({"color":"red"})
print('After updated with thisdict.update({"color":"red"})')
print("thisdict = ",thisdict)
thisdict.pop("model")
print('After removing item with key "model"')
print("thisdict = ", thisdict)
thisdict.popitem()
print("After removing the last item using thisdict.popitem()")
print("thisdict = ", thisdict)
thisdict.clear()
print("After clear all items in the dictionary using thisdict.clear()")
print(thisdict)

"""## Summary

data structures พื้นฐานมีอยู่สามแบบหลักๆใน Python
- list [ ]
- tuple ( )
- dictionary { }

แต่ละแบบมีการสร้างที่ไม่เหมือนกัน และมีลักษณะแตกต่างกัน ขึ้นอยู่กับ data anlysis ที่เรากำลังจะทำ (ส่วนใหญ่จะใช้ dict เยอะมากในงานทั่วๆไป)

- list -- mutable + ordered
- tuple -- immutable + ordered
- dictionary -- mutable + duplicate key not allowed

สำหรับการสร้าง dictionary ตัว key ต้องไม่ซ้ำกัน **unique** ปกติเรานิยมใช้ string ในการตั้งชื่อ key เหมือนตัวอย่างที่เราทำให้ดูใน tutorial นี้

```
my_friends = {
    'Joe': 28,
    'Andy': 30,
    'Mary': 25
}
```
"""

my_list = [1,2,3,4,5]
my_tuple = (1,2,3,4,5)
my_dict = {'A':1, 'B':2, 'C':3, 'D':4, 'E':5}

print(type(my_list))
print(type(my_tuple))
print(type(my_dict))