# -*- coding: utf-8 -*-
"""Nattapong Panthiya - Lab 16_Intro to NumPy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vdEqoHGIpx2VekcXoevKxSMyYMhdTB2b

### Introduction to Numerical Python (NumPy)

![alt text](https://images.unsplash.com/photo-1517976487492-5750f3195933?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=5ab4ea4fd87e2144a8662bee0164010d&auto=format&fit=crop&w=500&q=60)

numpy เป็นไลบรารี (library) ตัวหนึ่งใน Python ที่ในการคำนวณในรูปแบบ array คำว่า "numpy" ย่อมาจาก "Numerical Python"

ข้อดีของ numpy
- numpy เร็วมาก **เร็วเหมือนจรวด**
- numpy ใช้ง่ายมากเช่นกัน

tutorial นี้เราจะแนะนำการใช้งาน numpy เบื้องต้น เริ่มจากการ import มันเข้า notebook ของเราก่อน

```
import numpy as np
```
"""

# import numpy into our notebook
import numpy as np

# create normal list
my_list = [1,2,3,4,5,6,7,8,9,10]

print(type(my_list))

"""เราสามารถเปลี่ยน list ธรรมดาให้กลายเป็น np.ndarray ด้วยฟังชั่น

```
np.array(list)
```
"""

# create numpy array
my_arr = np.array(my_list)

print(type(my_arr))
print(my_arr)

"""# มิติของ Array

**Array 1 มิติ**

เป็น Array ที่สมาชิกไม่ใช่ Array ถือเป็น Array ที่อยู่ในรูปแบบพื้นฐานที่สุด

ตัวอย่าง
ลองสร้าง array 1 มิติ ที่มีสมาชิกคือ 1,2,3,4,5:
"""

# ลองสร้าง array 1 มิติ ที่มีสมาชิกคือ 1,2,3,4,5
arr1 = np.array([1,2,3,4,5])
print(arr1)

"""**Array 2 มิติ**

เป็น array ที่มีสมาชิกเป็น array 1 มิติ มักใช้แทนข้อมูลในรูปแบบของเมทริกซ์

ตัวอย่าง ลองสร้าง array 2 มิติ ที่มีสมาชิกเป็น array 1 มิติ 2 ตัว คือ [1,2,3] and [4,5,6]:
"""

# ลองสร้าง array 2 มิติ ที่มีสมาชิกเป็น array 1 มิติ 2 ตัว คือ [1,2,3] and [4,5,6]:
arr2 = np.array([[1,2,3],[4,5,6]])
print(arr2)

"""**Array 3 มิติ**

เป็น array ที่มีสมาชิกเป็น array 2 มิติ

ตัวอย่าง ลองสร้าง array 3 มิติ ที่มีสมาชิกเป็น array 2 มิติ 2 ตัว
โดยที่่ทั้งสองประกอบด้วยอาร์เรย์ที่มีค่า [1,2,3] and [4,5,6]:
"""

# ลองสร้าง array 3 มิติ ที่มีสมาชิกเป็น array 2 มิติ 2 ตัว โดยที่่ทั้งสองประกอบด้วยอาร์เรย์ที่มีค่า [1,2,3] and [4,5,6]:

threeDArr = np.array([[[1,2,3],[4,5,6]],[[1,2,3],[4,5,6]]])
print(threeDArr)

"""# การเข้าถึงสมาชิกของอาร์เรย์

เราสามารถเข้าถึงสมาชิกของอาร์เรย์โดยอ้างอิงจากหมายเลขดัชนี (index)

ดัชนีของอาร์เรย์ NumPy เริ่มต้นด้วย 0 หมายความว่าสมาชิกตัวแรกมีดัชนีเป็น 0 และสมาชิกตัวที่สองมีดัชนี 1 เป็นต้น

## แบบฝึกหัด
"""

# ลองพิมพ์ค่าสมาชิกตัวแรกของ array 1 มิติ ต่อไปนี้:

import numpy as np

arr = np.array([1, 2, 3, 4])
#พิมพ์ค่าสมาชิกตัวแรก
print(arr[0])

#พิมพ์ค่าสมาชิกตัวสุดท้าย
print(arr[3])


#พิมพ์ค่าสมาชิก 2,3,4
print(arr[1:4])

# ลองพิมพ์ค่าสมาชิกตัวแรกของ array 2 มิติ ต่อไปนี้:

import numpy as np

arr = np.array([[1, 2], [3, 4]])

# ถ้าอยากพิมพ์ค่าเลข 3 จาก arr ต้องเขียนคำสั่งอย่างไร
print(arr[1, 0])

"""# เฉือน (slicing) อาร์เรย์

หมายถึงการดึงข้อมูลบางส่วนของอาร์เรย์โดยการระบุดัชนีในรูปแบบ: [start:end]
หรือ [start:end:step]

ถ้าเราไม่กำหนดค่า start จะถือว่า start คือ 0

ถ้าเราไม่กำหนดค่า end จุะถือว่า end คือ ความยาวของอาร์เรย์ในมิตินั้น

ถ้าเราไม่กำหนดค่า step จะถือว่า step คือ 1

## แบบฝึกหัด
"""

import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7])
# ลอง slice arr เอามาแค่ [2, 3, 4, 5]
print(arr[1:5])


# ลอง slice arr ตั้งแต่สมาชิกตัวที่ 3 ไปจนถึงตัวสุดท้าย
print(arr[2:])

# ลอง slice arr ตั้งแต่สมาชิกตัวแรก ไปจนถึงสมาชิกที่มีค่าเป็น 4
print(arr[:4])


# ลอง slice arr ให้ได้ผลลัพธ์คือ [1, 3, 5, 7]
print(arr[0::2])

"""### basic statistics with numpy

เวลาจะเรียกใช้งานฟังชั่นของ numpy เราสามารถพิมพ์แบบนี้ได้เลย
```
np._____( )
```
โดยฟังชั่นสถิติหลักๆของ numpy มีดังนี้
- np.mean()
- np.median()
- np.sum()
- np.max()
- np.min()
- np.std()
"""

my_arr
dir(my_arr)

# หาค่าเฉลี่ย mean my_arr = np.array([1,2,3,4,5,6,7,8,9,10])
np.mean(my_arr)

print("mean: " + str(np.mean(my_arr)))
print("median: " + str(np.median(my_arr)))
print("max: " + str(np.max(my_arr)))
print("min: " + str(np.min(my_arr)))
print("standard deviation: " + str(np.std(my_arr)))
print("variance: " + str(np.var(my_arr)))
print("sum: " + str(np.sum(my_arr)))

"""### ง่ายอะไรเบอร์นี้ !!

มาลองสร้าง array ง่ายๆกันด้วยฟังชั่น ```np.arange()```

ใช้เหมือนกับฟังชั่น ```range()``` ที่เราเรียนมาในบทก่อนหน้านี้เลย
"""

x = np.arange(20)

print(x)

y = np.arange(5, 16, 2)

print(y)

a1 = np.arange(1,11)
print(a1)

"""### เราสามารถตรวจสอบค่าใน array ได้ง่ายๆด้วย basic boolean"""

y = np.arange(5, 30, 3)

print(y)

y <= 20

y == 23

# slice ด้วย boolean
y[y <= 20]

# slice ค่าที่มากกว่า 20 ขึ้นไป
y[y > 20]

"""### เราสามารถบวก ลบ คุณ หาร array ได้ปกติเลย"""

x = np.array([1,2,3,4,5])
y = np.array([6,7,8,9,10])

x * 2

x + y

y + 100

x = np.array([1,2,3])
y = np.array([4,5,6])

print(x+y)

"""### two-dimensional array"""

arr = np.array([[1,2,3], [4,5,6], [7,8,9]])

print(arr)

type(np.array([ [1,2], [3,4]  ]))

print(np.mean(arr))
print(np.sum(arr))

# print arr
print(arr)
print("")

# axis = 1
print("sum every row")
print(np.sum(arr, axis=1))

# axis = 0
print("")
print("sum every column")
print(np.sum(arr, axis=0))

"""### Summary

![alt text](https://images.unsplash.com/photo-1531482615713-2afd69097998?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=3a748e7b25651211d3092e562247c860&auto=format&fit=crop&w=500&q=60)

และนี่คือการทำงานด้วย numpy ในระดับเบื้องต้น

อย่าลืม ```import numpy as np``` ก่อนที่จะใช้ฟังชั่น

สำหรับคนที่อยากมาทางสาย data science การเขียน numpy ให้คล่อง สำคัญมาก
"""