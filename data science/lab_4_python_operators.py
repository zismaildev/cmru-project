# -*- coding: utf-8 -*-
"""Nattapong Panthiya - Lab 4_Python Operators.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HNaFJRmN4n6GEj1XrOnCvbSTUq3EUkGS

ตัวดำเนินการใน Python แบ่งเป็นประเภท ดังนี้


*   Arithmetic operators
*   Assignment operators
*   Comparison operators
*   Logical operators
*   Membership operators
*   Bitwise operators

# ตัวดำเนินการกำหนดค่า (Assignment operators)

เป็นตัวดำเนินการที่เป็นพื้นฐานที่สุดสำหรับการเขียนโปรแกรมในทุก ๆ ภาษา ใช้สำหรับกำหนดค่าให้กับตัวแปร ในภาษา Python ตัวดำเนินการนี้แสดงโดยใช้เครื่องหมายเท่ากับ (=)

# ตัวดำเนินการกำหนดค่า ใน Python

| Operator   	| Example   	| Same as      	|
|-----	|---------	|------------	|
| =     | x = 5     | x = 5       |
| +=  	| x += 3  	| x = x + 3  	|
| -=  	| x -= 3  	| x = x - 3  	|
| *=  	| x *= 3  	| x = x * 3  	|
| /=  	| x /= 3  	| x = x / 3  	|
| %=  	| x %= 3  	| x = x % 3  	|
| //= 	| x //= 3 	| x = x // 3 	|
| **= 	| x **= 3 	| x = x ** 3 	|
| &=  	| x &= 3  	| x = x & 3  	|
| \|= 	| x \|= 3 	| x = x \| 3 	|
| ^=  	| x ^= 3  	| x = x ^ 3  	|
| >>= 	| x >>= 3 	| x = x >> 3 	|
| <<= 	| x <<= 3 	| x = x << 3 	|
"""

# กำหนดค่าตัวแปร x ให้มีค่าเป็น 5
x = 5

print(x)

x = 5
x *= 3   # มีค่าเทียบเท่ากับคำสั่ง x = x * 3 หมายถึงให้เอาค่า x เดิม คือ 5 มาคูณกับ 3 แล้วนำผลลัพธ์ที่ได้ไปกำหนดค่าให้กับตัวแปร x อีกครั้ง
print(x)

x = 5
x **= 2 # x=x**2
print(x)

"""# ตัวดำเนินการเปรียบเทียบ (Comparison operators)

คือตัวดำเนินการที่ใช้สำหรับเปรียบเทียบค่าหรือค่าในตัวแปร ซึ่งผลลัพธ์ของการเปรียบเทียบนั้นจะเป็น True หากเงื่อนไขเป็นจริง และเป็น False หากเงื่อนไขไม่เป็นจริง

ตัวดำเนินการเปรียบเทียบมักจะใช้กับคำสั่งตรวจสอบเงื่อนไข if และคำสั่งวนซ้ำ for while เพื่อควบคุมการทำงานของโปรแกรม

# ตัวดำเนินการเปรียบเทียบใน Python

| Operator 	| Name                    	| Example    	|
|----------	|-------------------------	|------------	|
| <        	| Less than               	| a < b      	|
| <=       	| Less than or equal      	| a <= b     	|
| >        	| Greater than            	| a > b      	|
| >=       	| Greater than or equal   	| a >= b     	|
| ==       	| Equal                   	| a == b     	|
| !=       	| Not equal               	| a != b     	|
| is       	| Object identity         	| a is b     	|
| is not   	| Negated object identity 	| a is not b 	|
"""

x = 5
y = 3

print(x == y)

# returns False because 5 is not equal to 3

x = ["apple", "banana"] # x เป็นตัวแปรชนิด list
y = ["apple", "banana"]
z = x

print("x is z: ", x is z)

# returns True because z is the same object as x

print("x is y: ", x is y)

# returns False because x is not the same object as y, even if they have the same content

print("x == y: ", x == y)

# to demonstrate the difference betweeen "is" and "==": this comparison returns True because x is equal to y

print("x is not z: ", x is not z)

# returns False because z is the same object as x

print("x is not y: ", x is not y)

# returns True because x is not the same object as y, even if they have the same content

print("x != y: ", x != y)

# to demonstrate the difference betweeen "is not" and "!=": this comparison returns False because x is equal to y

"""# ตัวดำเนินการตรรกศาสตร์ (Logical operators)

 คือตัวดำเนินการที่ใช้สำหรับประเมินค่าทางตรรกศาสตร์ ซึ่งเป็นค่าที่มีเพียงจริง (True) และเท็จ (False) เท่านั้น โดยทั่วไปแล้วเรามักใช้ตัวดำเนินการตรรกศาสตร์ในการเชื่อม Boolean expression ตั้งแต่หนึ่ง expression ขึ้นไปและผลลัพธ์สุดท้ายที่ได้นั้นจะเป็น Boolean

# ตัวดำเนินการตรรกศาสตร์ใน Python

| Operator 	| Example 	| Result                               	|
|----------	|---------	|--------------------------------------	|
| and      	| a and b 	| True if a and b are true, else False 	|
| or       	| a or b  	| True if a or b are true, else False  	|
| not      	| not a   	| True if a is False, else True        	|
"""

x = 5

print(x > 3 and x < 10)

# returns True because 5 is greater than 3 AND 5 is less than 10

x = 5

print(x > 3 or x < 4)

# returns True because one of the conditions are true (5 is greater than 3, but 5 is not less than 4)

x = 5

print(not(x > 3 and x < 10))

# returns False because not is used to reverse the result

"""# ตัวดำเนินการตรวจสอบการเป็นสมาชิก (Membership operators)

เป็นตัวดำเนินการที่ใช้ในการตรวจสอบการเป็นสมาชิกในออบเจ็คประเภท List Tuple และ Dictionary ตัวดำเนินการ in ใช้ในการตรวจสอบถ้าหากค่านั้นมีอยู่ในออบเจ็ค ถ้าหากพบจะได้ผลลัพธ์เป็น True และหากไม่พบจะได้ผลลัพธ์เป็น False และตัวดำเนินการ not in นั้นจะทำงานตรงกันข้าม หากไม่พบจะได้ผลลัพธ์เป็น True แทน

# ตัวดำเนินการตรวจสอบการเป็นสมาชิกใน Python

| Operator 	| Description                                                                      	| Example    	|
|----------	|----------------------------------------------------------------------------------	|------------	|
| in       	| Returns True if a sequence with the specified value is present in the object     	| x in y     	|
| not in   	| Returns True if a sequence with the specified value is not present in the object 	| x not in y 	|
"""

x = ["apple", "banana"]

print("banana in x is ", "banana" in x)

# returns True because a sequence with the value "banana" is in the list

x = ["apple", "banana"]

print("pineapple not in x is ", "pineapple" not in x)

# returns True because a sequence with the value "pineapple" is not in the list

print("apple not in x is ", "apple" not in x)

# returns False because a sequence with the value "apple" is in the list

"""# ตัวดำเนินการระดับบิต (Bitwise operators)

เป็นตัวดำเนินการที่ทำงานในระดับบิตของข้อมูล หรือจัดการข้อมูลในระบบเลขฐานสอง โดยทั่วไปแล้วตัวดำเนินการระดับบิตมักจะใช้กับการเขียนโปรแกรมระดับต่ำ เช่น การเขียนโปรแกรมเพื่อควบคุมฮาร์ดแวร์ อย่างไรก็ตาม ในภาษา Python นั้นสนับสนุนตัวดำเนินการเพื่อให้เราสามารถจัดการกับบิตของข้อมูลโดยตรงได้

# ตัวดำเนินการระดับบิตใน Python

| Operator 	| Name                 	| Description                                                                                             	|
|----------	|----------------------	|---------------------------------------------------------------------------------------------------------	|
| &        	| AND                  	| Sets each bit to 1 if both bits are 1                                                                   	|
| \|       	| OR                   	| Sets each bit to 1 if one of two bits is 1                                                              	|
|  ^       	| XOR                  	| Sets each bit to 1 if only one of two bits is 1                                                         	|
| ~        	| NOT                  	| Inverts all the bits                                                                                    	|
| <<       	| Zero fill left shift 	| Shift left by pushing zeros in from the right and let the leftmost bits fall off                        	|
| >>       	| Signed right shift   	| Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off 	|
"""

a = 3 # 00000011
b = 5 # 00000101

print('a & b =', a & b)        # 00000001 --> 1
print('a | b =', a | b)        # 00000111 --> 7
print('a ^ b =', a ^ b)        # 00000110 --> 6
print('~a =', ~a)              # 11111100 --> -4
print('a << 1 =', a << 1)      # 00000110 --> 6
print('a << 2 =', a << 2)      # 00001100 --> 12
print('100 >> 1 =', 100 >> 1)  # 01100100 >> 1 --> 00110010 --> 50

#แบบฝึกหัด
#ถ้าอยากทราบว่าคะแนนสอบที่ถูกเก็บไว้ในตัวแปร testScore จะได้เกรด B+ หรือไม่ถ้าตัดเกรดตามเกณฑ์
#มาตรฐาน เราต้องตั้งเงื่อนไขในการตรวจสอบอย่างไร
#if testScore >= 75:
#  print(f"คะแนนของคุณคือ {testScore} คุณได้เกรด B+")
#else:
#  print(f"คุณไม่ได้เกรด B+ เพราะคะแนนของคุณคือ {testScore} ")

testScore = 78
print(testScore > 75 and testScore < 79)