# -*- coding: utf-8 -*-
"""Nattapong Panthiya - Lab 11_Control Flow - While Loop.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18V_c-U8AO9RYAenWDK_s7DIBuVH3K7ah

## WHILE LOOP

เราเดินมาถึง control flow ตัวสุดท้ายแล้วววว ซึ่งก็คือ **while-loop** นั่นเอง

วิธีการเขียน while ก็เหมือนกับ for เลย template ทุกอย่างเหมือนเดิม ย่อหน้าต่าง ๆ ก็เหมือนเดิม แต่ while-loop เป็นการทำซ้ำในขณะที่เงื่อนไขที่กำหนดยังมีค่าเป็นจริง โดยทำการเช็คเงื่อนไขเมื่อเริ่มต้นรอบการทำซ้ำทุกรอบ ถ้าเช็คเงื่อนไขแล้วเป็นจริงจะทำงานในรอบถัดไป แต่ถ้าเงื่อนไขเป็นเท็จจะหยุดการทำซ้ำ

```
while True:
    do something
```
"""

# Example 1
x = 0

# print x ไปเรื่อยๆ ถ้า x <= 7
# ทุกครั้งที่ print(x) ให้เราเพิ่ม +1 ค่า x ด้วย

while x <= 7:
  print(x)
  x += 1
  # x = x+1

# Example 2
# หาค่ารากที่ 2 (square root) ของตัวเลขหนึ่ง ๆ ด้วยวิธีของบาบิโลน (Babylonian Algorithm)

number = 10
x0 = 0
x = 1

while x != x0:
  print("x = {}, x0 = {}".format(x,x0))
  x0 = x
  x = (x+number/x)/2
print("Square root of",number,"is", x)

"""# คำสั่ง break และ continue ใน while-loop

สำหรับการใช้คำสั่ง break และ continue ใน while-loop ผลของการใช้คำสั่งเหมือนกับการใช้ใน for-loop
"""

# ตัวอย่างการใช้ break ใน while-loop
# ออกจาก loop เมื่อค่า i เป็น 3

i = 1
while i < 4:
  print(i)
  if i == 3:
    break
  i += 1

# ตัวอย่างการใช้ continue ใน while-loop
# Continue to the next iteration if i is 3:

i = 0
while i < 4:
  i += 1
  if i == 3:
    continue
  print(i)

"""## Summary

สำหรับ line สุดท้ายใน while-loop สองอันที่เราเขียนไป **สำคัญมาก** เราต้องอัพเดทค่าตัวแปรที่เราใช้เป็น condition ใน while loop

ถ้าเราลืมอัพเดท while-loop จะวิ่งไปเรื่อยๆไม่หยุดเลย (infinite loop) โปรแกรมเราอาจค้างได้ ต้องเช็คให้ดี

```
x = 0
while x <= 10:
    do something
    x = x + 1 #อย่าลืมอัพเดทค่า x !!
```

## Intermediate Python (optional)

![alt text](https://images.unsplash.com/photo-1508672019048-805c876b67e2?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=bd27a515bce2dade58bc288fde28f290&auto=format&fit=crop&w=500&q=60)

ตัวอย่างที่สามเป็น optional แต่ก็ไม่ยากจนเกินไป (ทุกคนทำได้ !!) เรามาลองสร้าง simple program เกมทายเลขง่ายๆใน Python

คำตอบที่ถูกคือ 33

User ต้องทายไปเรื่อยๆ ถ้าถูกก็จะหลุดออกจาก while-loop i.e. จบเกม ใช้ keyword **break**

ถ้าทายผิด ก็ต้องทายไปเรื่อยๆจนกว่าจะถูก
"""

# Example 3
# สร้าง game ทายเลขง่ายๆ
# ถ้าทายถูก เลข 33 เกมจบ
# แต่ถ้ายังทายไม่ถูกก้ต้องทายไปเรื่อยๆ

while True:
  guess_number = int(input("ทายเลข 1-100: "))
  if guess_number==33 :
    print("your guess is correct: 33")
    break # ทายถูกเราก็ break ออกจาก while-loop
  else:
       print("Try again")

"""อธิบาย ฟังชั่น **input()** ใช้รับ input อย่างที่ชื่อมันบอกเลยจาก user

ค่าที่รับมาจะเป็น string เราเลยต้องใช้ **int(input())** เพื่อเปลี่ยนตัวเลขให้กลายเป็น int ก่อนจะไปเปรียบเทียบ if guess_number == 33: ใน if-else
"""

# แบบฝึกหัด
# รับตัวเลขและแสดงผลตัวเลขบนหน้าจอจนกว่าผู้ใช้กรอก -1

while True:
    number = int(input("ใส่ตัวเลขของคุณ : "))
    if number == -1:
        print("ลาก่อน")
        break
    else:
        print(number)